# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/lib_nbs/develop/launch_robots.ipynb.

# %% auto 0
__all__ = ['TIME_EP', 'EPISODES', 'N_AGENTS', 'Nt', 'L', 'r', 'tau', 'agent_radius', 'avg_vel', 'std_vel', 'avg_turn_angle',
           'std_turn_angle', 'size_state_space', 'gamma_damping', 'eta_glow_damping', 'initial_prob_distr']

# %% ../nbs/lib_nbs/develop/launch_robots.ipynb 3
import numba
import numpy as np
from .robot_search import RobotSearch, run_robot_training_parallel
from numba import set_num_threads 
from tqdm import tqdm
import pathlib
import os
numba.get_num_threads()
import matplotlib.pyplot as plt

# %% ../nbs/lib_nbs/develop/launch_robots.ipynb 11
# Training spec
TIME_EP = 2000
EPISODES = 1000
N_AGENTS = 30 # If you keep it below you number of cores, it runs in a single "run". If not, it needs to do N_AGENTS/N_CORES runs

# Environment 
Nt = 100; L = 100; r = 1; tau = 3; agent_radius = 2; avg_vel = 1.04; std_vel = 0.67; avg_turn_angle = 0.64; std_turn_angle = 0.41;


# Agent
size_state_space = np.array([TIME_EP], dtype=np.int64)
gamma_damping = 0.00001
eta_glow_damping = 0.1
initial_prob_distr = (np.array([0.988, 0.012/2, 0.012/2])*np.ones((3, TIME_EP)).transpose()).transpose()


# %% ../nbs/lib_nbs/develop/launch_robots.ipynb 73
import numba
import numpy as np
from .robot_search import parallel_robots_trajectories

# %% ../nbs/lib_nbs/develop/launch_robots.ipynb 92
# Training spec
TIME_EP = 1000000
EPISODES = 1
N_AGENTS = 100

# Environment 
Nt = 100; L = 100; r = 1; tau = 3; agent_radius = 2; avg_vel = 1.04; std_vel = 0.67; avg_turn_angle = 0.64; std_turn_angle = 0.41;


# Agent (we restrict the size of the h matrix to a maximum counter value of 10000)
size_state_space = np.array([10000], dtype=np.int64)
gamma_damping = 0.00001
eta_glow_damping = 0.1
initial_prob_distr = (np.array([0.988, 0.012/2, 0.012/2])*np.ones((3, 10000)).transpose()).transpose()
